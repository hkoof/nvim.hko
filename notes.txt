# Neovim notes
#

## show current value of an option, e.g. rtp (alias runtimepath)
```ascii
:echo &runtimepath
```

## show current value of an option, in a new (split) window

```ascii
:new | put =split(&runtimepath, ',')
```

## show current value of an option using lua

```ascii
:lua print(vim.inspect(vim.api.nvim_list_runtime_paths()))
```

```ascii
:lua =vim.opt.runtimepath._value
```


# Changing runtimepath using vimscript

```ascii
let &runtimepath.=', "~/.config/nvim/lua"'
```

# Changing runtimepath using vimscript

```ascii
lua vim.opt.runtimepath:append(',~/.config/nvim/lua')
```

Or, the ugly way:

```ascii
vim.api.nvim_command('set runtimepath^=~/.vim')
```

## lua print() is spartan, e.g.:
```ascii
:lua print(vim.treesitter)
table: 0x818df7ee99
```

But nvim itself has a more capable print():
```ascii
:lua vim.print(vim.treesitter)

<actual table contents>
```


auto indent line:  ==

## Treesitter
On the fly (not in config) starting a treesitter feature:

```ascii
:TSBufEnable indent|highlight|incremental selection
```


## :normal command
To e.g.  append a ';' to a set of lines, select the lines (V) and type the vim
normal-mode commands in the ex prompt. Eg. A; would append a ';' to a line.
Select multiple lines with V and the type   :normal A;  to append to all the lines.

## increasing numbers: ctrl-a
## decreasing numbers: ctrl-x

Works also voor multiple selected lines (V)
And with ctrl-a prefixed with 'g' numbers will be increased each line

16
16
17
18
19
20
21


## when selecting lines, 'o' switches which end of the selection the cursor is.

## '%' switches to the matching bracket ([<
'%' is a motion you can use to e.g. delete between matching brackets.


## 'i' or 'a' (Inside , Around) as motion for 'c' (change), 'd' (delete), 'v' (select)
## or other commands
## Also works on multiple lines

(
     "({hello})"
)


## process selected (V) lines with a external command, eg. jq to pretty print selected
## lines of json:

    :'<,'>!jq .

(yes, include the period in the command above)


Other command to create big letters:


     Title


Select the title and run ex comand:

    :'<,'>!toilet -w200 -f mono9

## shorthand executing lua vim-print command:

This is quite common:
```
  :lua vim.print(vim.lsp)
```

Shorthand to do the same:
```
    :=vim.lsp
```

## nvim ex :command versus script

ex :command
`:echo getcwd()`

is equivalent to this in a lua script:
`print(vim.fn.getcwd())`

## list autocommand (callback) events within neovim

`:h events`

## call up LSP hover window manually (with the cursor on a function header line)

`:lua vim.lsp.buf.hover()`

List all possible LSP functions:

:=vim.lsp.buf

## 
